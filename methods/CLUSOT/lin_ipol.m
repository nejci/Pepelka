function [r]=lin_ipol(B)
% [r]=lin_ipol(B)
%
% TODO: <short description>
%
% TODO: <explain vars>
% 
% $Id: lin_ipol.m 409 2005-03-04 19:12:19Z dome $
% D. Brugger, 01 March 2005
% algo/lin_ipol.m

if(nargin == 0)
  test_lin_ipol();
  return;
end

% more than one point?
if(size(B,1)==1)
  r=B; return;
end

pos=1; r=[];
for k=1:size(B,1)-1
  % skip redundant points
  if(sum(B(k,:) == B(k+1,:))==2)
    continue;
  end
  r(pos,:)=B(k,:); pos = pos + 1;
  tmp=bresenham(B(k,:),B(k+1,:));
  if(size(tmp,1) > 2)
    r(pos:pos+size(tmp,1)-3,:)=tmp(2:size(tmp,1)-1,:);
    pos = pos + size(tmp,1)-3 + 1;
  end
end

if(sum(B(size(B,1),:) == B(1,:))==2)
  % make sure to keep at least one of the points
  if(isempty(r)) 
    r(pos,:)=B(1,:);
  end
else
  r(pos,:)=B(size(B,1),:); pos = pos + 1;
  tmp=bresenham(B(size(B,1),:),B(1,:));
  if(size(tmp,1) > 2)
    r(pos:pos+size(tmp,1)-3,:)=tmp(2:size(tmp,1)-1,:);
    pos = pos + size(tmp,1)-3 + 1;
  end
end

function test_lin_ipol()
% test case #1
B = [2 2; ...
     2 4; ...
     3 5; ...
     4 6; ...
     6 6; ...
     8 4; ...
     6 2; ...
     4 1];
er = [2 2; ...
      2 3; ...
      2 4; ...
      3 5; ...
      4 6; ...
      5 6; ...
      6 6; ...
      7 5; ...
      8 4; ...
      7 3; ...
      6 2; ...
      5 2; ...
      4 1; ...
      3 1];
r=lin_ipol(B)
[n,m]=size(r);
check_equal(r,er,'r','er');

%figure;
%plot(r(:,1),r(:,2));
%set(gca,'XLim',[1 12],'YLim',[1 9]);

% test case #2 - redundant points in middle of B
B = [2 2; ...
     2 4; ...
     2 4; ...
     2 4; ...
     3 5; ...
     4 6; ...
     6 6; ...
     6 6; ...
     8 4; ...
     6 2; ...
     4 1];
r=lin_ipol(B)
check_equal(r,er,'r','er');

% test case #3 - redundant points wrapping end of B
B = [2 2; ...
     2 4; ...
     3 5; ...
     4 6; ...
     6 6; ...
     8 4; ...
     6 2; ...
     4 1; ...
     2 2];
r=lin_ipol(B)
check_equal(r,er,'r','er');

% test case #4 - all points the same
B = [2 1; ...
     2 1; ...
     2 1; ...
     2 1];
er = [2 1];
r=lin_ipol(B)
check_equal(r,er,'r','er');

% test case #5 - just one point
B = [2 1];
r=lin_ipol(B)
check_equal(r,er,'r','er');

fprintf('test_lin_ipol succeded\n')